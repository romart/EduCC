
 

 
 
 static DiagnosticDescriptor descriptors[] = {

 {DSK_WARNING,IDT_LEXICAL,DIAG_INTEGER_BIN_CONST_OVERFLOW,"INTEGER_BIN_CONST_OVERFLOW", "Integer overflow in binary constant" }, {DSK_ERROR,IDT_LEXICAL,DIAG_ESCAPE_SEC_OOR_HEX,"ESCAPE_SEC_OOR_HEX", "hex escape sequence out of range" }, {DSK_ERROR,IDT_LEXICAL,DIAG_ESCAPE_SEC_OOR_OCT,"ESCAPE_SEC_OOR_OCT", "octal escape sequence out of range" }, {DSK_WARNING,IDT_LEXICAL,DIAG_MULTI_CHAR_CONST,"MULTI_CHAR_CONST", "multi-character character constant" }, {DSK_WARNING,IDT_LEXICAL,DIAG_IMPLICIT_CONVERSION,"IMPLICIT_CONVERSION", "implicit conversion from '%s' to '%s' changes value from %ld to %u" }, {DSK_ERROR,IDT_SYNTAX,DIAG_UNEXPECTED_TOKEN,"UNEXPECTED_TOKEN", "unexpected token %tk '%s' instead of %tk" }, {DSK_ERROR,IDT_SYNTAX,DIAG_EXPECTED_TOKEN,"EXPECTED_TOKEN", "expected token '%tk' instead of '%tk'" }, {DSK_ERROR,IDT_SYNTAX,DIAG_EXPECTED_FUNCTION_DECLARATOR,"EXPECTED_FUNCTION_DECLARATOR", "Expected function declarator here" }, {DSK_ERROR,IDT_SYNTAX,DIAG_UNEXPECTED_TYPE_NAME_EXPR,"UNEXPECTED_TYPE_NAME_EXPR", "unexpected type name '%s': expected expression" }, {DSK_ERROR,IDT_SYNTAX,DIAG_ENUM_LIST_ID_EXPECT,"ENUM_LIST_ID_EXPECT", "Expecting IDENTIFIER in enum list but found %tk" }, {DSK_ERROR,IDT_SYNTAX,DIAG_EMPTY_ENUM,"EMPTY_ENUM", "use of empty enum" }, {DSK_ERROR,IDT_SYNTAX,DIAG_ID_ALREADY_SPECIFIED,"ID_ALREADY_SPECIFIED", "identificator is already specified" }, {DSK_WARNING,IDT_SYNTAX,DIAG_MISSING_TYPE_SPECIFIER,"MISSING_TYPE_SPECIFIER", "type specifier missing, defaults to 'int'" }, {DSK_ERROR,IDT_SYNTAX,DIAG_EXPECTED_SEMI_AFTER_TL_DECLARATOR,"EXPECTED_SEMI_AFTER_TL_DECLARATOR", "expected ';' after top level declarator" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INVALID_INITIALIZER,"INVALID_INITIALIZER", "invalid initializer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ARRAY_TYPE_IS_NOT_ASSIGNABLE,"ARRAY_TYPE_IS_NOT_ASSIGNABLE", "array type '%tr' is not assignable" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INITIALIZER_IS_NOT_COMPILE_TIME_CONSTANT,"INITIALIZER_IS_NOT_COMPILE_TIME_CONSTANT", "initializer element is not a compile-time constant" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_W_EXCESS_ELEMENTS_INIT,"W_EXCESS_ELEMENTS_INIT", "excess elements in scalar initializer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_E_EXCESS_ELEMENTS_INIT,"E_EXCESS_ELEMENTS_INIT", "excess elements in scalar initializer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_SCALAR_INIT_EMPTY,"SCALAR_INIT_EMPTY", "scalar initializer cannot be empty" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ILLEGAL_INIT_ONLY_VARS,"ILLEGAL_INIT_ONLY_VARS", "illegal initializer (only variables can be initialized)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_TOO_FEW_ARGS,"TOO_FEW_ARGS", "too few arguments to function call" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_TOO_MANY_ARGS,"TOO_MANY_ARGS", "too many arguments to function call" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_DUPLICATE_CASE_VALUE,"DUPLICATE_CASE_VALUE", "duplicate case value '%d'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_MULTIPLE_DEFAULT_LABELS,"MULTIPLE_DEFAULT_LABELS", "multiple default labels in one switch" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_UNDECLARED_LABEL,"UNDECLARED_LABEL", "use of undeclared label '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_FUN_CONFLICTING_TYPES,"FUN_CONFLICTING_TYPES", "conflicting types for '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_USE_WITH_DIFFERENT_TAG,"USE_WITH_DIFFERENT_TAG", "use of '%s' with tag type that does not match previous declaration" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_TYPEDEF_REDEFINITION_C11,"TYPEDEF_REDEFINITION_C11", "redefinition of typedef '%s' is a C11 feature" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_TYPEDEF_REDEFINITION_TYPES,"TYPEDEF_REDEFINITION_TYPES", "typedef redefinition with different types ('%tr' vs '%tr')" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_VALUE_REDEFINITION_TYPES,"VALUE_REDEFINITION_TYPES", "redefinition of '%s' with a different type: '%tr' vs '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_SYMBOL_REDEFINITION,"SYMBOL_REDEFINITION", "redefinition of '%s' as different kind of symbol" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_MEMBER_REDEFINITION,"MEMBER_REDEFINITION", "redefinition of '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ENUMERATOR_REDEFINITION,"ENUMERATOR_REDEFINITION", "redefinition of enumerator '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_VAR_INCOMPLETE_TYPE,"VAR_INCOMPLETE_TYPE", "variable has incomplete type '%td'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_FIELD_INCOMPLETE_TYPE,"FIELD_INCOMPLETE_TYPE", "field '%s' has incomplete type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_FUNCTION_RETURN_FUNCTION_TYPE,"FUNCTION_RETURN_FUNCTION_TYPE", "function cannot return function type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_FUNCTION_RETURN_ARRAY_TYPE,"FUNCTION_RETURN_ARRAY_TYPE", "function cannot return array type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ARRAY_OF_FUNCTIONS_ILLEGAL,"ARRAY_OF_FUNCTIONS_ILLEGAL", "Array of functions is illegal type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ARRAY_SUBSCRIPT_NOT_INT,"ARRAY_SUBSCRIPT_NOT_INT", "array subscript is not an integer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_SUBSCRIPTED_NOT_A_POINTER,"SUBSCRIPTED_NOT_A_POINTER", "subscripted value is not an array or pointer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INVOKE_NOT_FUNCTIONAL,"INVOKE_NOT_FUNCTIONAL", "called object type '%tr' is not a function or function pointer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_MEMBER_REF_NOT_A_POINTER,"MEMBER_REF_NOT_A_POINTER", "member reference type '%tr' is not a pointer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_MEMBER_REF_NOT_A_STRUCTUAL,"MEMBER_REF_NOT_A_STRUCTUAL", "member reference base type '%tr' is not a structure or union" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_NO_MEMBER_NAME,"NO_MEMBER_NAME", "no member named '%s' in '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INCOMPATIBLE_OPERANDS,"INCOMPATIBLE_OPERANDS", "incompatible operand types ('%tr' and '%tr')" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_POINTER_TYPE_MISMATCH,"POINTER_TYPE_MISMATCH", "pointer type mismatch ('%tr' and '%tr')" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_POINTER_INT_MISMATCH_IN_COND,"POINTER_INT_MISMATCH_IN_COND", "pointer/integer type mismatch in conditional expression ('%tr' and '%tr')" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INVALID_BINARY_OPS,"INVALID_BINARY_OPS", "invalid operands to binary expression ('%tr' and '%tr')" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CANNOT_DECREMENT,"CANNOT_DECREMENT", "cannot decrement value of type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CANNOT_INCREMENT,"CANNOT_INCREMENT", "cannot increment value of type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INDERECTION_POINTER_OP,"INDERECTION_POINTER_OP", "indirection requires pointer operand ('%tr' invalid)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INVALID_UNARY_ARGUMENT,"INVALID_UNARY_ARGUMENT", "invalid argument type '%tr' to unary expression" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ASSIGN_FROM_INCOMPATIBLE_TYPE,"ASSIGN_FROM_INCOMPATIBLE_TYPE", "assigning to '%tr' from incompatible type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ASSIGN_IN_CONST,"ASSIGN_IN_CONST", "cannot assign to lvalue with const-qualified type '%tr'" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_ASSIGN_INT_TO_POINTER,"ASSIGN_INT_TO_POINTER", "incompatible integer to pointer conversion assigning to '%tr' from '%tr'" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_ASSIGN_INCOMPATIBLE_POINTERS,"ASSIGN_INCOMPATIBLE_POINTERS", "incompatible pointer types assigning to '%tr' from '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_EXPECTED_CONST_EXPR,"EXPECTED_CONST_EXPR", "expected constant expression" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_EXPECTED_INTEGER_CONST_EXPR,"EXPECTED_INTEGER_CONST_EXPR", "expression is not an integer constant expression" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_UNDECLARED_ID_USE,"UNDECLARED_ID_USE", "use of undeclared identifier '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_REGISTER_ADDRESS,"REGISTER_ADDRESS", "address of register variable requested" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_SIZEOF_INCOMPLETE_TYPE,"SIZEOF_INCOMPLETE_TYPE", "invalid application of 'sizeof' to an incomplete type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_BIT_FIELD_NEGATIVE_WIDTH,"BIT_FIELD_NEGATIVE_WIDTH", "bit-field '%s' has negative width (%d)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ANON_BIT_FIELD_NEGATIVE_WIDTH,"ANON_BIT_FIELD_NEGATIVE_WIDTH", "anonymous bit-field has negative width (%d)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_EXCEED_BIT_FIELD_TYPE_WIDTH,"EXCEED_BIT_FIELD_TYPE_WIDTH", "width of bit-field '%s' (%d bits) exceeds the width of its type (%d)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_EXCEED_ANON_BIT_FIELD_TYPE_WIDTH,"EXCEED_ANON_BIT_FIELD_TYPE_WIDTH", "width of anonymous bit-field (%d bits) exceeds the width of its type (%d)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_BIT_FIELD_TYPE_NON_INT,"BIT_FIELD_TYPE_NON_INT", "bit-field '%s' has non-integral type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ANON_BIT_FIELD_TYPE_NON_INT,"ANON_BIT_FIELD_TYPE_NON_INT", "anonymous bit-field has non-integral type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ILL_TYPE_SIGN,"ILL_TYPE_SIGN", "'%s' cannot be signed or unsigned" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INVALID_TYPE,"INVALID_TYPE", "'%s%s%s%s%s' is invalid" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_E_DUPLICATE_DECL_SPEC,"E_DUPLICATE_DECL_SPEC", "duplicate '%s' declaration specifier" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CANNOT_COMBINE_DECL_SPEC,"CANNOT_COMBINE_DECL_SPEC", "cannot combine with previous '%s' declaration specifier" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_W_DUPLICATE_DECL_SPEC,"W_DUPLICATE_DECL_SPEC", "duplicate '%s' declaration specifier" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_NON_COMPUTE_DECL_SIZE,"NON_COMPUTE_DECL_SIZE", "cannot compute size of declaration" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ANON_STRUCT_IS_DEFINITION,"ANON_STRUCT_IS_DEFINITION", "declaration of anonymous struct must be a definition" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_UNKNOWN_TYPE_NAME,"UNKNOWN_TYPE_NAME", "unknown type name '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_PARAM_BEFORE_ELLIPSIS,"PARAM_BEFORE_ELLIPSIS", "ISO C requires a named parameter before '...'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_VOID_SINGLE,"VOID_SINGLE", "'void' must be the first and only parameter if specified" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_VOID_PARAMTER_TYPE,"VOID_PARAMTER_TYPE", "parameter may not have 'void' type" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_SWITCH_LABEL_NOT_IN_SWITCH,"SWITCH_LABEL_NOT_IN_SWITCH", "'%s' statement not in switch statement" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_SWITCH_ARG_NOT_INTEGER,"SWITCH_ARG_NOT_INTEGER", "statement requires expression of integer type ('%tr' invalid)" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CONTINUE_NOT_IN_LOOP,"CONTINUE_NOT_IN_LOOP", "'continue' statement not in loop statement" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_BRAEK_NOT_IN_LOOP_OR_SWITCH,"BRAEK_NOT_IN_LOOP_OR_SWITCH", "'break' statement not in loop or switch statement" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_LABEL_REDEFINITION,"LABEL_REDEFINITION", "redefinition of label '%s'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_EXTERN_VAR_INIT,"EXTERN_VAR_INIT", "'extern' variable cannot have an initializer" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ARRAY_EXPLICIT_SIZE_OR_INIT,"ARRAY_EXPLICIT_SIZE_OR_INIT", "definition of variable with array type needs an explicit size or an initializer" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_DECLARES_NOTHING,"DECLARES_NOTHING", "declaration does not declare anything" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ILLEGAL_STORAGE_ON_FILE_SCOPE,"ILLEGAL_STORAGE_ON_FILE_SCOPE", "illegal storage class on file-scoped variable" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_STORAGE_NOT_ALLOWED,"STORAGE_NOT_ALLOWED", "type name does not allow storage class to be specified" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INVALID_STORAGE_ON_PARAM,"INVALID_STORAGE_ON_PARAM", "invalid storage class specifier in function declarator" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_EXPRESSION_IS_NOT_ASSIGNABLE,"EXPRESSION_IS_NOT_ASSIGNABLE", "expression is not assignable" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_NON_CASTABLE_TYPE,"NON_CASTABLE_TYPE", "used type '%tr' where arithmetic or pointer type is required" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_NON_CASTABLE_OPERAND,"NON_CASTABLE_OPERAND", "operand of type '%tr' where arithmetic or pointer type is required" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_POINTER_CANNOT_BE_CAST,"POINTER_CANNOT_BE_CAST", "pointer cannot be cast to type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CANNOT_BE_CAST_TO_POINTER,"CANNOT_BE_CAST_TO_POINTER", "operand of type '%tr' cannot be cast to a pointer type" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CAST_TO_UNION_NOT_PRESENT,"CAST_TO_UNION_NOT_PRESENT", "cast to union type from type '%tr' not present in union" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_CANNOT_TAKE_ADDRESS_OF_RVALUE,"CANNOT_TAKE_ADDRESS_OF_RVALUE", "cannot take the address of an rvalue of type '%tr'" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_TYPEDEF_WITHOUT_NAME,"TYPEDEF_WITHOUT_NAME", "typedef requires a name" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_ILL_INDIRECT_GOTO_OPERAND,"ILL_INDIRECT_GOTO_OPERAND", "indirect goto in function with no address-of-label expressions" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_BIT_FIELD_ADDRESS,"BIT_FIELD_ADDRESS", "address of bit-field requested" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_INCOMPATIBLE_PTR_DIFF,"INCOMPATIBLE_PTR_DIFF", "'%tr' and '%tr' are not pointers to compatible types" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_PTR_ARITH_INCOMPLETE_TYPE,"PTR_ARITH_INCOMPLETE_TYPE", "arithmetic on a pointer to an incomplete type '%tr'" }, {DSK_ERROR,IDT_SEMANTHICAL,DIAG_PTR_ARITH_EMPTY_TYPE,"PTR_ARITH_EMPTY_TYPE", "arithmetic on pointer to an empty aggregate" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_UNUSED_EXPR_RES,"UNUSED_EXPR_RES", "expression result unused" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_INT_PTR_COMPARISON,"INT_PTR_COMPARISON", "comparison between pointer and integer ('%tr' and '%tr')" }, {DSK_WARNING,IDT_SEMANTHICAL,DIAG_ORDEDER_INT_PTR_COMPARISON,"ORDEDER_INT_PTR_COMPARISON", "ordered comparison between pointer and integer ('%tr' and '%tr')" }, {DSK_ERROR,IDT_PP,DIAG_INVALID_PP_DIRECTIVE,"INVALID_PP_DIRECTIVE", "invalid preprocessor directive %tk" }, {DSK_ERROR,IDT_PP,DIAG_EXPECTED_FILENAME,"EXPECTED_FILENAME", "expected ""\"""FILENAME""\""" or <FILENAME>" }, {DSK_ERROR,IDT_PP,DIAG_INCLUDE_FILE_NOT_FOUND,"INCLUDE_FILE_NOT_FOUND", "'%s' file not found" }, {DSK_WARNING,IDT_PP,DIAG_EXTRA_TOKENS,"EXTRA_TOKENS", "extra tokens at end of #include directive" }, {DSK_ERROR,IDT_PP,DIAG_MACRO_NAME_IS_ID,"MACRO_NAME_IS_ID", "macro name must be an identifier" }, {DSK_ERROR,IDT_PP,DIAG_PP_ERROR,"PP_ERROR", "%s" }, {DSK_ERROR,IDT_PP,DIAG_PP_CANNOT_EVALUATE,"PP_CANNOT_EVALUATE", "cannot evaluate expression" }, {DSK_ERROR,IDT_PP,DIAG_PP_WITHOUT_IF,"PP_WITHOUT_IF", "#%s without #if" }, {DSK_ERROR,IDT_PP,DIAG_PP_UNTERMINATED_COND_DIRECTIVE,"PP_UNTERMINATED_COND_DIRECTIVE", "unterminated conditional directive" }, {DSK_ERROR,IDT_PP,DIAG_PP_INVALID_TOKEN_MACRO_PARAM,"PP_INVALID_TOKEN_MACRO_PARAM", "invalid token in macro parameter list" }, {DSK_ERROR,IDT_PP,DIAG_PP_MISSING_PAREN_IN_PARAMS,"PP_MISSING_PAREN_IN_PARAMS", "missing ')' in macro parameter list" }, {DSK_ERROR,IDT_PP,DIAG_PP_TOO_MANY_ARGUMENTS,"PP_TOO_MANY_ARGUMENTS", "too many arguments provided to function-like macro invocation" }, {DSK_ERROR,IDT_PP,DIAG_PP_TOO_FEW_ARGUMENTS,"PP_TOO_FEW_ARGUMENTS", "too few arguments provided to function-like macro invocation" }, {DSK_ERROR,IDT_PP,DIAG_PP_WRONG_CONCAT_OP_PLACE,"PP_WRONG_CONCAT_OP_PLACE", "'##' cannot appear at either begin or end of a macro expansion" }, {DSK_WARNING,IDT_PP,DIAG_PP_MACRO_REDEFINED,"PP_MACRO_REDEFINED", "'%s' redefined" }
 };


